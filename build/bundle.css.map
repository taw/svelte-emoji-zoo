{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Enclosure.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Enclosure from \"./Enclosure.svelte\";\n</script>\n\n<style>\n  .zoo {\n    display: grid;\n    grid-template-rows: 1fr 1fr;\n    grid-template-columns: 1fr 1fr;\n    height: 100vh;\n    width: 100wh;\n  }\n</style>\n\n<div class=\"zoo\">\n  <Enclosure animalEmoji=\"🐧\" foodEmojis={['🍭', '🍫', '🍦']} />\n\n  <Enclosure animalEmoji=\"🐼\" foodEmojis={['🍬', '🍪', '🧁']} />\n\n  <Enclosure animalEmoji=\"🐯\" foodEmojis={['🍰', '🥠', '🎂']} />\n\n  <Enclosure animalEmoji=\"🐮\" foodEmojis={['🍨', '🍩', '🍡']} />\n</div>\n",
    "<script>\n  import { onMount } from \"svelte\";\n\n  export let animalEmoji;\n  export let foodEmojis;\n\n  let mouseFoodEmoji = foodEmojis[0];\n  let foodPositions = [];\n  let animalX = 0;\n  let animalY = 0;\n  let domNode;\n  let happy = false;\n\n  $: animalStyle = `\n    left: ${animalX}px;\n    top: ${animalY}px;\n  `;\n\n  function foodStyle([x, y]) {\n    return `\n      left: ${x}px;\n      top: ${y}px;\n    `;\n  }\n\n  function clamp(num, min, max) {\n    return Math.min(Math.max(num, min), max);\n  }\n\n  function randomElement(array) {\n    return array[Math.floor(Math.random() * array.length)];\n  }\n\n  function giveMoreFood(event) {\n    let { clientX, clientY } = event;\n    let rect = event.target.getBoundingClientRect();\n    let x = clientX - rect.x - 18;\n    let y = clientY - rect.y - 8;\n\n    foodPositions.push([\n      clamp(x, 0, rect.width - 36),\n      clamp(y, 0, rect.height - 36),\n      mouseFoodEmoji\n    ]);\n    mouseFoodEmoji = randomElement(foodEmojis);\n    foodPositions = foodPositions;\n  }\n\n  $: cursorCSS = `cursor:url(\"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg'  width='40' height='48' viewport='0 0 100 100' style='fill:black;font-size:24px;'><text y='50%'>${mouseFoodEmoji}</text></svg>\") 16 0,auto;`;\n\n  function distanceTo([x, y]) {\n    return Math.sqrt((x - animalX) ** 2 + (y - animalY) ** 2);\n  }\n\n  function findClosestFood() {\n    return [...foodPositions].sort((a, b) => distanceTo(a) - distanceTo(b))[0];\n  }\n\n  function eatFood(foodX, foodY) {\n    foodPositions = foodPositions.filter(([x, y]) => {\n      return !(x === foodX && y === foodY);\n    });\n  }\n\n  function moveAnimal() {\n    if (!foodPositions.length) return;\n    let [foodX, foodY] = findClosestFood();\n    let dx = foodX - animalX;\n    let dy = foodY - animalY;\n    let d = Math.sqrt(dx ** 2 + dy ** 2);\n    if (d > 1) {\n      dx /= d;\n      dy /= d;\n    }\n    if (d === 0) {\n      eatFood(foodX, foodY);\n      happy = true;\n      setTimeout(() => (happy = false), 1000);\n    }\n    animalX += dx;\n    animalY += dy;\n  }\n\n  function randomNumber(min, max) {\n    return min + Math.random() * (max - min);\n  }\n\n  function randomPosition(rect, emojiSize) {\n    return [\n      randomNumber(0, rect.width - emojiSize),\n      randomNumber(0, rect.height - emojiSize)\n    ];\n  }\n\n  function randomFood() {\n    return randomElement(foodEmojis);\n  }\n\n  function initalize() {\n    let rect = domNode.getBoundingClientRect();\n    [animalX, animalY] = randomPosition(rect, 36);\n    foodPositions = [0, 0, 0].map(() => [\n      ...randomPosition(rect, 24),\n      randomFood()\n    ]);\n  }\n\n  onMount(initalize);\n\n  setInterval(moveAnimal, 1000 / 60);\n</script>\n\n<style>\n  .enclosure {\n    background-color: #afc;\n    margin: 1em;\n    height: 45vh;\n    width: 45vw;\n    margin: auto;\n    position: relative;\n  }\n  .animal {\n    font-size: 50px;\n    position: absolute;\n    pointer-events: none;\n  }\n  .animal::after {\n    position: absolute;\n    right: -6px;\n    top: 0;\n    content: \"💖\";\n    font-size: 16px;\n    opacity: 0;\n    transition: opacity 0.5s;\n  }\n  .animal.happy::after {\n    opacity: 1;\n  }\n  .food {\n    font-size: 36px;\n    position: absolute;\n    pointer-events: none;\n  }\n</style>\n\n<div\n  class=\"enclosure\"\n  on:click={giveMoreFood}\n  style={cursorCSS}\n  bind:this={domNode}>\n  <span style={animalStyle} class:happy class=\"animal\">{animalEmoji}</span>\n  {#each foodPositions as food}\n    <span style={foodStyle(food)} class=\"food\">{food[2]}</span>\n  {/each}\n</div>\n"
  ],
  "names": [],
  "mappings": "AAKE,IAAI,cAAC,CAAC,AACJ,OAAO,CAAE,IAAI,CACb,kBAAkB,CAAE,GAAG,CAAC,GAAG,CAC3B,qBAAqB,CAAE,GAAG,CAAC,GAAG,CAC9B,MAAM,CAAE,KAAK,CACb,KAAK,CAAE,KAAK,AACd,CAAC;ACsGD,UAAU,eAAC,CAAC,AACV,gBAAgB,CAAE,IAAI,CACtB,MAAM,CAAE,GAAG,CACX,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,QAAQ,AACpB,CAAC,AACD,OAAO,eAAC,CAAC,AACP,SAAS,CAAE,IAAI,CACf,QAAQ,CAAE,QAAQ,CAClB,cAAc,CAAE,IAAI,AACtB,CAAC,AACD,sBAAO,OAAO,AAAC,CAAC,AACd,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,CACX,GAAG,CAAE,CAAC,CACN,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IAAI,CACf,OAAO,CAAE,CAAC,CACV,UAAU,CAAE,OAAO,CAAC,IAAI,AAC1B,CAAC,AACD,OAAO,qBAAM,OAAO,AAAC,CAAC,AACpB,OAAO,CAAE,CAAC,AACZ,CAAC,AACD,KAAK,eAAC,CAAC,AACL,SAAS,CAAE,IAAI,CACf,QAAQ,CAAE,QAAQ,CAClB,cAAc,CAAE,IAAI,AACtB,CAAC"
}